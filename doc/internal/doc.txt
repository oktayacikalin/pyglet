Documentation
*************

This is the ``pyglet`` documentation, generated with ``sphinx``. 

Details:

.. include:: build.rst

.. note::

   See the `Sphinx warnings log file <../warnings.txt>`_ for errors.


Writing documentation
---------------------

``pyglet`` uses reStructuredText markup language for both 
the Programming Guide and the docstrings embedded in the code.

Literature 
==========


It is divided into several files, which are organized by ``toctree`` directives .

The entry point for all the documentation is ``pyglet/doc/index.txt``, which calls to:

* ``pyglet/doc/programming_guide``: The first page of the programming guide.

* ``pyglet/doc/internal``: 
  Documentation for those working on Pyglet itself, such as how to make a release 
  or how the ctypes library is used.


Source code
===========

The API documentation is generated from the source code docstrings.


:Example:

   .. code-block:: python

      class Class1():
      """Short description.

      Detailed explanation, formatted as reST.
      Can be as detailed as it is needed. 
    
   
      :Parameters: 
         Narrative description
         `arg1` : type description
             description

      :return: return description
      :since: pyglet 1.2

      """

      attribute1 = None
      """This is an attribute.
      """
      #: This is an attribute.
      attribute2 = None


      def _get_property2(self):
          """Getter Method 
          
          :return: property1 value
          :rtype: property1 type
          """

      def _set_property2(self, value):
          """Setter Method 
          
          :param value: property1 value
          :type value: property1 type

          """
   
      property2 = property(_get_property2, _set_property2,
                        doc='''Short description
   
      This is another attribute.

      :type: type
      :see: something else
      ''')


 

Generation
----------

The complete documentation can be generated using ``sphinx``.

.. rubric:: Requirements

* ``sphinx``: Documentation builder.
* ``graphviz``: If you want to generate graphs.


To build the documentation, execute::

   ./make.py docs

If the build succeeds, the web pages are in ``_build/html``


.. rubric:: Details

.. toctree::
   :maxdepth: 1

   doc_generation

